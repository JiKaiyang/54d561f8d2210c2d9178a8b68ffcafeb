=== modified file 'CMakeLists.txt'
--- CMakeLists.txt	2013-10-15 20:47:06 +0000
+++ CMakeLists.txt	2013-12-03 14:57:42 +0000
@@ -1,6 +1,6 @@
 # Check http://webdev.elementaryos.org/docs/developer-guide/cmake for documentation
 
-project (wingpanel)
+project (wingpanel C)
 cmake_minimum_required (VERSION 2.8)
 cmake_policy (VERSION 2.8)
 
@@ -33,8 +33,23 @@
 add_custom_target (dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)
 
 # Set dependencies
-set (WINGPANEL_DEPS "gobject-2.0;glib-2.0;gio-2.0;gee-0.8;gdk-x11-3.0;x11;gtk+-3.0;granite")
-set (WINGPANEL_DEPS_NOVALA "gthread-2.0;indicator3-0.4")
+set (WINGPANEL_DEPS
+    gobject-2.0
+    glib-2.0
+    gio-2.0
+    gee-0.8
+    gdk-x11-3.0
+    x11
+    gtk+-3.0
+    granite
+    indicator3-0.4
+    libido3-0.1
+)
+
+set (WINGPANEL_DEPS_NOVALA
+    gthread-2.0
+)
+
 find_package (PkgConfig)
 pkg_check_modules (DEPS REQUIRED ${WINGPANEL_DEPS})
 pkg_check_modules (DEPS_NOVALA REQUIRED ${WINGPANEL_DEPS_NOVALA})
@@ -69,7 +84,6 @@
     src/IndicatorIface.vala
     src/IndicatorLoader.vala
 
-    src/Indicator/IndicatorFileModel.vala
     src/Indicator/IndicatorObjectEntry.vala
     src/Indicator/IndicatorObject.vala
     src/Indicator/IndicatorFactory.vala
@@ -91,10 +105,10 @@
 	${WINGPANEL_DEPS}
 CUSTOM_VAPIS
     vapi/config.vapi
-    vapi/indicator-0.4.vapi
 OPTIONS
+    -g
 	--thread
-	-g
+    --vapidir=${CMAKE_CURRENT_SOURCE_DIR}/vapi/
 )
 
 # Settings Schema

=== modified file 'src/Indicator/IndicatorFactory.vala'
--- src/Indicator/IndicatorFactory.vala	2013-04-14 17:37:10 +0000
+++ src/Indicator/IndicatorFactory.vala	2013-12-03 14:55:19 +0000
@@ -1,45 +1,101 @@
 // -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
-//  
+//
 //  Copyright (C) 2013 Wingpanel Developers
-// 
+//
 //  This program is free software: you can redistribute it and/or modify
 //  it under the terms of the GNU General Public License as published by
 //  the Free Software Foundation, either version 3 of the License, or
 //  (at your option) any later version.
-// 
+//
 //  This program is distributed in the hope that it will be useful,
 //  but WITHOUT ANY WARRANTY; without even the implied warranty of
 //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 //  GNU General Public License for more details.
-// 
+//
 //  You should have received a copy of the GNU General Public License
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 public class Wingpanel.Backend.IndicatorFactory : Object, IndicatorLoader {
-    private IndicatorFileModel model;
     private Gee.Collection<IndicatorIface> indicators;
-    private bool initted = false;
+    private string[] settings_blacklist;
 
-    public IndicatorFactory (Services.Settings settings) {
-        model = new IndicatorFileModel (settings);
+    public IndicatorFactory (string[] settings_blacklist) {
+        this.settings_blacklist = settings_blacklist;
     }
 
     public Gee.Collection<IndicatorIface> get_indicators () {
-        if (!initted) {
+        if (indicators == null) {
+            indicators = new Gee.LinkedList<IndicatorIface> ();
             load_indicators ();
-            initted = true;
         }
 
         return indicators.read_only_view;
     }
 
     private void load_indicators () {
-        indicators = new Gee.LinkedList<IndicatorIface> ();
-        var indicators_list = model.get_indicators ();
-
-        foreach (var indicator in indicators_list) {
-            string name = model.get_indicator_name (indicator);
-            indicators.add (new IndicatorObject (indicator, name));
+        // Fetch list of indicators that should not be loaded
+        string skip_list = Environment.get_variable ("UNITY_PANEL_INDICATORS_SKIP") ?? "";
+
+        if (skip_list == "all") {
+            warning ("Skipping all indicator loading");
+            return;
+        }
+
+        foreach (string blocked_indicator in settings_blacklist)
+            skip_list += "," + blocked_indicator;
+
+        debug ("Blacklisted Indicators: %s", skip_list);
+
+        // Legacy indicator libraries
+        load_indicators_from_dir (Build.INDICATORDIR, true, skip_list);
+
+        // Ng indicators
+        load_indicators_from_dir ("/usr/share/unity/indicators", false, skip_list);
+    }
+
+    private void load_indicators_from_dir (string dir_path, bool legacy_libs_only, string skip_list) {
+        try {
+            var dir = File.new_for_path (dir_path);
+            var enumerator = dir.enumerate_children (FileAttribute.STANDARD_NAME,
+                                                     FileQueryInfoFlags.NONE, null);
+            FileInfo file_info;
+
+            while ((file_info = enumerator.next_file (null)) != null) {
+                string name = file_info.get_name ();
+
+                if (name in skip_list)
+                    continue;
+
+                load_indicator (dir, legacy_libs_only, name);
+            }
+        } catch (Error err) {
+            warning ("Unable to read indicators: %s", err.message);
+        }
+    }
+
+    private void load_indicator (File parent_dir, bool legacy_lib, string name) {
+        string indicator_path = parent_dir.get_child (name).get_path ();
+
+        try {
+            Indicator.Object indicator = null;
+
+            if (legacy_lib) {
+                if (!name.has_suffix (".so"))
+                    return;
+
+                debug ("Loading Indicator Library: %s", name);
+                indicator = new Indicator.Object.from_file (indicator_path);
+            } else {
+                debug ("Loading Indicator File: %s", name);
+                indicator = new Indicator.Ng.for_profile (indicator_path, "desktop");
+            }
+
+            if (indicator != null)
+                indicators.add (new IndicatorObject (indicator, name));
+            else
+                critical ("Unable to load %s: invalid object.", name);
+        } catch (Error err) {
+            warning ("Could not load indicator at %s: %s", indicator_path, err.message);
         }
     }
 }

=== removed file 'src/Indicator/IndicatorFileModel.vala'
--- src/Indicator/IndicatorFileModel.vala	2013-04-14 17:31:20 +0000
+++ src/Indicator/IndicatorFileModel.vala	1970-01-01 00:00:00 +0000
@@ -1,94 +0,0 @@
-// -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
-/***
-  BEGIN LICENSE
-
-  Copyright (C) 2010-2012 Canonical Ltd
-  This program is free software: you can redistribute it and/or modify it
-  under the terms of the GNU Lesser General Public License version 3, as published
-  by the Free Software Foundation.
-
-  This program is distributed in the hope that it will be useful, but
-  WITHOUT ANY WARRANTY; without even the implied warranties of
-  MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
-  PURPOSE.  See the GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License along
-  with this program.  If not, see <http://www.gnu.org/licenses/>
-
-  END LICENSE
-
-  Authored by canonical.com
-***/
-
-namespace Wingpanel.Backend {
-
-    public class IndicatorFileModel {
-        private Gee.HashMap<Indicator.Object, string> indicator_map;
-
-        public IndicatorFileModel (Services.Settings settings) {
-            indicator_map = new Gee.HashMap<Indicator.Object, string> ();
-
-            // Indicators we don't want to load
-            string skip_list = Environment.get_variable ("UNITY_PANEL_INDICATORS_SKIP") ?? "";
-
-            if (skip_list == "all") {
-                warning ("Skipping all indicator loading");
-                return;
-            }
-
-            foreach (string blocked_indicator in settings.blacklist) {
-                skip_list += "," + blocked_indicator;
-                debug ("Blacklisting %s", blocked_indicator);
-            }
-
-            debug ("Blacklisted Indicators: %s", skip_list);
-
-            var indicators_to_load = new Gee.ArrayList<string> ();
-            var dir = File.new_for_path (Build.INDICATORDIR);
-            debug ("Indicator Directory: %s", dir.get_path ());
-
-            try {
-                var enumerator = dir.enumerate_children (FileAttribute.STANDARD_NAME,
-                                                         FileQueryInfoFlags.NONE, null);
-
-                FileInfo file_info;
-
-                while ((file_info = enumerator.next_file (null)) != null) {
-                    string leaf = file_info.get_name ();
-
-                    if (leaf in skip_list) {
-                        warning ("SKIP LOADING: %s", leaf);
-                        continue;
-                    }
-
-                    if (leaf.has_suffix (".so"))
-                        indicators_to_load.add (leaf);
-                }
-            } catch (Error err) {
-                error ("Unable to read indicators: %s", err.message);
-            }
-
-            foreach (string leaf in indicators_to_load)
-                load_indicator (dir.get_child (leaf).get_path (), leaf);
-        }
-
-        public Gee.Collection<Indicator.Object> get_indicators () {
-            return indicator_map.keys;
-        }
-
-        public string get_indicator_name (Indicator.Object indicator) {
-            return indicator_map.get (indicator);
-        }
-
-        private void load_indicator (string filename, string leaf) {
-            debug ("LOADING: %s", leaf);
-
-            var indicator = new Indicator.Object.from_file (filename);
-
-            if (indicator is Indicator.Object)
-                indicator_map.set (indicator, leaf);
-            else
-                critical ("Unable to load %s", filename);
-        }
-    }
-}

=== modified file 'src/Indicator/IndicatorObject.vala'
--- src/Indicator/IndicatorObject.vala	2013-04-14 17:39:47 +0000
+++ src/Indicator/IndicatorObject.vala	2013-12-03 14:55:19 +0000
@@ -1,17 +1,17 @@
 // -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
-//  
+//
 //  Copyright (C) 2013 Wingpanel Developers
-// 
+//
 //  This program is free software: you can redistribute it and/or modify
 //  it under the terms of the GNU General Public License as published by
 //  the Free Software Foundation, either version 3 of the License, or
 //  (at your option) any later version.
-// 
+//
 //  This program is distributed in the hope that it will be useful,
 //  but WITHOUT ANY WARRANTY; without even the implied warranty of
 //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 //  GNU General Public License for more details.
-// 
+//
 //  You should have received a copy of the GNU General Public License
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
@@ -63,14 +63,14 @@
 
     private void on_entry_removed (Indicator.Object object, Indicator.ObjectEntry entry) {
         assert (this.object == object);
- 
+
         var entry_widget = entries.get (entry);
         entries.unset (entry);
- 
+
         entry_removed (entry_widget);
     }
 
     private IndicatorWidget create_entry (Indicator.ObjectEntry entry) {
-        return new IndicatorObjectEntry (entry, this);
+        return new IndicatorObjectEntry (entry, object, this);
     }
 }

=== modified file 'src/Indicator/IndicatorObjectEntry.vala'
--- src/Indicator/IndicatorObjectEntry.vala	2013-08-19 19:12:24 +0000
+++ src/Indicator/IndicatorObjectEntry.vala	2013-12-03 14:55:19 +0000
@@ -18,10 +18,11 @@
   END LICENSE
 ***/
 
-namespace Wingpanel.Backend
-{
+namespace Wingpanel.Backend {
+
     public class IndicatorObjectEntry: Widgets.IndicatorButton, IndicatorWidget {
         private unowned Indicator.ObjectEntry entry;
+        private unowned Indicator.Object parent_object;
         private IndicatorIface indicator;
 
         // used for drawing
@@ -39,17 +40,18 @@
             .menu {
                 background-color:@transparent;
                 border-color:@transparent;
-                -unico-inner-stroke-width: 0;
                 background-image:none;
+                border-width:0;
              }
              .popover_bg {
                background-color:#fff;
              }
          """;
 
-        public IndicatorObjectEntry (Indicator.ObjectEntry entry, IndicatorIface indicator) {
+        public IndicatorObjectEntry (Indicator.ObjectEntry entry, Indicator.Object obj, IndicatorIface indicator) {
             this.entry = entry;
             this.indicator = indicator;
+            parent_object = obj;
 
             var image = entry.image;
             if (image != null && image is Gtk.Image)
@@ -192,32 +194,7 @@
         }
 
         public override bool scroll_event (Gdk.EventScroll event) {
-            var direction = Indicator.ScrollDirection.UP;
-            double delta = 0;
-
-            switch (event.direction) {
-                case Gdk.ScrollDirection.UP:
-                    delta = event.delta_y;
-                    direction = Indicator.ScrollDirection.UP;
-                    break;
-                case Gdk.ScrollDirection.DOWN:
-                    delta = event.delta_y;
-                    direction = Indicator.ScrollDirection.DOWN;
-                    break;
-                case Gdk.ScrollDirection.LEFT:
-                    delta = event.delta_x;
-                    direction = Indicator.ScrollDirection.LEFT;
-                    break;
-                case Gdk.ScrollDirection.RIGHT:
-                    delta = event.delta_x;
-                    direction = Indicator.ScrollDirection.RIGHT;
-                    break;
-                default:
-                    break;
-            }
-
-            entry.parent_object.entry_scrolled (entry, (uint) delta, direction);
-
+            parent_object.entry_scrolled (entry, 1, (Indicator.ScrollDirection) event.direction);
             return false;
         }
     }

=== modified file 'src/Services/IndicatorSorter.vala'
--- src/Services/IndicatorSorter.vala	2013-04-14 10:19:10 +0000
+++ src/Services/IndicatorSorter.vala	2013-12-03 14:55:19 +0000
@@ -23,6 +23,7 @@
  * be passed as CompareFuncs.
  */
 public class Wingpanel.Services.IndicatorSorter {
+
     private struct IndicatorOrderNode {
         public string name;        // name of indicator (library)
         public string? entry_name; // name of entry (menu item)
@@ -32,19 +33,25 @@
         { "libapplication.so", null },                   // indicator-application (App indicators)
         { "libapplication.so", "keyboard" },             // Keyboard layout selector (old)
         { "libapplication.so", "gsd-keyboard-xkb" },     // keyboard layout selector
+        { "com.canonical.indicator.keyboard", null },
         { "libsoundmenu.so", null },                     // indicator-sound
+        { "com.canonical.indicator.sound", null },
         { "libnetwork.so", null },                       // indicator-network
         { "libnetworkmenu.so", null },                   // indicator-network
         { "libapplication.so", "nm-applet" },            // network manager
         { "libbluetooth.so", null },                     // indicator-bluetooth
         { "libapplication.so", "bluetooth-manager" },    // indicator-gnome-bluetooth (old)
+        { "com.canonical.indicator.bluetooth", null },
         { "libprintersmenu.so", null },                  // indicator-printers
         { "libsyncindicator.so", null },                 // indicator-sync
         { "libpower.so", null },                         // indicator-power
+        { "com.canonical.indicator.power", null },
         { "libmessaging.so", null },                     // indicator-messages
+        { "com.canonical.indicator.messages", null },
         { "libsession.so", null },                       // indicator-session
         { "libsession.so", "indicator-session-users" },  // indicator-session
-        { "libsession.so", "indicator-session-devices" } // indicator-session
+        { "libsession.so", "indicator-session-devices" },// indicator-session
+        { "com.canonical.indicator.session", null }
     };
 
     public static int compare_func (IndicatorWidget? a, IndicatorWidget? b) {

=== modified file 'src/Widgets/Panel.vala'
--- src/Widgets/Panel.vala	2013-04-14 07:54:25 +0000
+++ src/Widgets/Panel.vala	2013-12-03 14:55:19 +0000
@@ -31,8 +31,8 @@
 
         private IndicatorLoader indicator_loader;
 
-        public Panel (WingpanelApp app, Services.Settings settings, IndicatorLoader indicator_loader) {
-            set_application (app as Gtk.Application);
+        public Panel (Gtk.Application app, Services.Settings settings, IndicatorLoader indicator_loader) {
+            set_application (app);
 
             this.indicator_loader = indicator_loader;
 
@@ -77,7 +77,9 @@
         }
 
         private void create_entry (IndicatorWidget entry) {
-            if (entry.get_indicator ().get_name () == "libdatetime.so")
+            string entry_name = entry.get_indicator ().get_name ();
+
+            if (entry_name == "libdatetime.so" || entry_name == "com.canonical.indicator.datetime")
                 clock.prepend (entry);
             else
                 menubar.insert_sorted (entry);

=== modified file 'src/WingpanelApp.vala'
--- src/WingpanelApp.vala	2013-04-14 07:54:25 +0000
+++ src/WingpanelApp.vala	2013-12-03 14:55:19 +0000
@@ -1,59 +1,53 @@
 // -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
-/***
-  BEGIN LICENSE
-
-  Copyright (C) 2011-2012 Wingpanel Developers
-  This program is free software: you can redistribute it and/or modify it
-  under the terms of the GNU Lesser General Public License version 3, as published
-  by the Free Software Foundation.
-
-  This program is distributed in the hope that it will be useful, but
-  WITHOUT ANY WARRANTY; without even the implied warranties of
-  MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
-  PURPOSE.  See the GNU General Public License for more details.
-
-  You should have received a copy of the GNU General Public License along
-  with this program.  If not, see <http://www.gnu.org/licenses/>
-
-  END LICENSE
-***/
-
-namespace Wingpanel {
-
-    public class WingpanelApp : Granite.Application {
-        private IndicatorLoader indicator_loader;
-        private Services.Settings settings;
-        private Widgets.BasePanel panel;
-
-        construct {
-            build_data_dir = Build.DATADIR;
-            build_pkg_data_dir = Build.PKGDATADIR;
-            build_release_name = Build.RELEASE_NAME;
-            build_version = Build.VERSION;
-            build_version_info = Build.VERSION_INFO;
-
-            program_name = "Wingpanel";
-            exec_name = "wingpanel";
-            application_id = "net.launchpad.wingpanel";
-        }
-
-        protected override void activate () {
-            debug ("Activating");
-
-            if (get_windows () == null)
-                init ();
-        }
-
-        private void init () {
-            settings = new Services.Settings ();
-            indicator_loader = new Backend.IndicatorFactory (settings);
-            panel = new Widgets.Panel (this, settings, indicator_loader);
-
-            panel.show_all ();
-        }
-
-        public static int main (string[] args) {
-            return new WingpanelApp ().run (args);
-        }
+//
+//  Copyright (C) 2013 Wingpanel Developers
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+public class Wingpanel.App : Granite.Application {
+    private IndicatorLoader indicator_loader;
+    private Widgets.BasePanel panel;
+
+    construct {
+        build_data_dir = Build.DATADIR;
+        build_pkg_data_dir = Build.PKGDATADIR;
+        build_release_name = Build.RELEASE_NAME;
+        build_version = Build.VERSION;
+        build_version_info = Build.VERSION_INFO;
+
+        program_name = "Wingpanel";
+        exec_name = "wingpanel";
+        application_id = "net.launchpad.wingpanel";
+    }
+
+    protected override void startup () {
+        base.startup ();
+
+        Ido.init ();
+
+        var settings = new Services.Settings ();
+        indicator_loader = new Backend.IndicatorFactory (settings.blacklist);
+        panel = new Widgets.Panel (this, settings, indicator_loader);
+
+        panel.show_all ();
+    }
+
+    protected override void activate () {
+        panel.present ();
+    }
+
+    public static int main (string[] args) {
+        return new Wingpanel.App ().run (args);
     }
 }

=== renamed file 'vapi/indicator-0.4.vapi' => 'vapi/indicator3-0.4.vapi'
--- vapi/indicator-0.4.vapi	2013-10-15 20:44:53 +0000
+++ vapi/indicator3-0.4.vapi	2013-12-03 14:58:36 +0000
@@ -1,4 +1,4 @@
-/* indicator-0.4.vapi generated by vapigen, do not modify. */
+/* indicator3-0.4.vapi generated by vapigen, do not modify. */
 
 namespace Indicator {
 	[CCode (cheader_filename = "libindicator/indicator-desktop-shortcuts.h", type_check_function = "INDICATOR_IS_DESKTOP_SHORTCUTS", type_id = "indicator_desktop_shortcuts_get_type ()")]
@@ -7,11 +7,23 @@
 		public DesktopShortcuts (string file, string identity);
 		public unowned string get_nicks ();
 		public bool nick_exec (string nick);
+		public bool nick_exec_with_context (string nick, GLib.AppLaunchContext launch_context);
 		public unowned string nick_get_name (string nick);
 		public string desktop_file { construct; }
 		[NoAccessorMethod]
 		public string identity { owned get; construct; }
 	}
+	[CCode (cheader_filename = "libindicator/indicator-ng.h", type_check_function = "INDICATOR_IS_NG", type_id = "indicator_ng_get_type ()")]
+	public class Ng : Indicator.Object, GLib.Initable {
+		[CCode (has_construct_function = false)]
+		public Ng (string service_file) throws GLib.Error;
+		[CCode (has_construct_function = false)]
+		public Ng.for_profile (string service_file, string profile) throws GLib.Error;
+		public unowned string get_profile ();
+		public unowned string get_service_file ();
+		public string profile { get; construct; }
+		public string service_file { get; construct; }
+	}
 	[CCode (cheader_filename = "libindicator/indicator-object.h", type_check_function = "INDICATOR_IS_OBJECT", type_id = "indicator_object_get_type ()")]
 	public class Object : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -42,17 +54,8 @@
 		public virtual unowned Gtk.Menu get_menu ();
 		[NoWrapper]
 		public virtual unowned string get_name_hint ();
+		public virtual int get_position ();
 		public virtual bool get_show_now (Indicator.ObjectEntry entry);
-		[NoWrapper]
-		public virtual void reserved1 ();
-		[NoWrapper]
-		public virtual void reserved2 ();
-		[NoWrapper]
-		public virtual void reserved3 ();
-		[NoWrapper]
-		public virtual void reserved4 ();
-		[NoWrapper]
-		public virtual void reserved5 ();
 		public void set_environment (string[] env);
 		public void set_visible (bool visible);
 		[NoAccessorMethod]
@@ -75,26 +78,15 @@
 		public weak Gtk.Menu menu;
 		public weak string name_hint;
 		public weak Indicator.Object parent_object;
-		public weak GLib.Callback reserved1;
-		public weak GLib.Callback reserved2;
-		public weak GLib.Callback reserved3;
-		public weak GLib.Callback reserved4;
 		public static void activate (Indicator.Object io, Indicator.ObjectEntry entry, uint timestamp);
 		public static void activate_window (Indicator.Object io, Indicator.ObjectEntry entry, uint windowid, uint timestamp);
 		public static void close (Indicator.Object io, Indicator.ObjectEntry entry, uint timestamp);
+		public static bool is_visible (Indicator.Object io, Indicator.ObjectEntry entry);
 	}
 	[CCode (cheader_filename = "libindicator/indicator-service.h", type_check_function = "INDICATOR_IS_SERVICE", type_id = "indicator_service_get_type ()")]
 	public class Service : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Service (string name);
-		[NoWrapper]
-		public virtual void indicator_service_reserved1 ();
-		[NoWrapper]
-		public virtual void indicator_service_reserved2 ();
-		[NoWrapper]
-		public virtual void indicator_service_reserved3 ();
-		[NoWrapper]
-		public virtual void indicator_service_reserved4 ();
 		[CCode (cname = "indicator_service_new_version", has_construct_function = false)]
 		public Service.with_version (string name, uint version);
 		[NoAccessorMethod]
@@ -108,14 +100,6 @@
 		[CCode (has_construct_function = false)]
 		public ServiceManager (string dbus_name);
 		public bool connected ();
-		[NoWrapper]
-		public virtual void indicator_service_manager_reserved1 ();
-		[NoWrapper]
-		public virtual void indicator_service_manager_reserved2 ();
-		[NoWrapper]
-		public virtual void indicator_service_manager_reserved3 ();
-		[NoWrapper]
-		public virtual void indicator_service_manager_reserved4 ();
 		public void set_refresh (uint time_in_ms);
 		[CCode (cname = "indicator_service_manager_new_version", has_construct_function = false)]
 		public ServiceManager.with_version (string dbus_name, uint version);
@@ -140,28 +124,6 @@
 	public const string GET_TYPE_S;
 	[CCode (cheader_filename = "libindicator/indicator.h")]
 	public const string GET_VERSION_S;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_DEFAULT_VISIBILITY;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_ACCESSIBLE_DESC_UPDATE;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_ENTRY_ADDED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_ENTRY_MOVED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_ENTRY_REMOVED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_ENTRY_SCROLLED;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_MENU_SHOW;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_SECONDARY_ACTIVATE;
-	[CCode (cheader_filename = "libindicator/indicator-gobject.h")]
-	public const string OBJECT_SIGNAL_SHOW_NOW_CHANGED;
-	[CCode (cheader_filename = "libindicator/indicator-service-manager.h")]
-	public const string SERVICE_MANAGER_SIGNAL_CONNECTION_CHANGE;
-	[CCode (cheader_filename = "libindicator/indicator-service.h")]
-	public const string SERVICE_SIGNAL_SHUTDOWN;
 	[CCode (cheader_filename = "libindicator/indicator.h")]
 	public const int SET_VERSION;
 	[CCode (cheader_filename = "libindicator/indicator.h")]
@@ -172,4 +134,6 @@
 	public static unowned Gtk.Image image_helper (string name);
 	[CCode (cheader_filename = "libindicator/indicator-image-helper.h")]
 	public static void image_helper_update (Gtk.Image image, string name);
+	[CCode (cheader_filename = "libindicator/indicator-image-helper.h")]
+	public static void image_helper_update_from_gicon (Gtk.Image image, GLib.Icon icon);
 }

=== added file 'vapi/libido3-0.1.vapi'
--- vapi/libido3-0.1.vapi	1970-01-01 00:00:00 +0000
+++ vapi/libido3-0.1.vapi	2013-12-03 14:55:19 +0000
@@ -0,0 +1,4 @@
+[CCode (cheader_filename="libido/libido.h", lower_case_cprefix = "ido_")]
+namespace Ido {
+	public void init ();
+}

