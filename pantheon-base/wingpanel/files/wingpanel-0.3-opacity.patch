=== modified file 'CMakeLists.txt'
--- CMakeLists.txt	2013-10-16 09:36:11 +0000
+++ CMakeLists.txt	2014-03-09 12:37:35 +0000
@@ -44,6 +44,7 @@
     granite
     indicator3-0.4
     libido3-0.1
+    libwnck-3.0
 )
 
 set (WINGPANEL_DEPS_NOVALA
@@ -72,6 +73,8 @@
 link_libraries(${DEPS_LIBRARIES} ${DEPS_NOVALA_LIBRARIES})
 link_directories(${DEPS_LIBRARY_DIRS} ${DEPS_NOVALA_DIRS})
 
+add_definitions (-DWNCK_I_KNOW_THIS_IS_UNSTABLE)
+
 # Handle Vala Compilation
 find_package(Vala REQUIRED)
 include(ValaVersion)
@@ -101,6 +104,7 @@
     src/Services/AppLauncherService.vala
     src/Services/LauncherRunner.vala
     src/Services/IndicatorSorter.vala
+    src/Services/BackgroundManager.vala
 PACKAGES
 	${WINGPANEL_DEPS}
 CUSTOM_VAPIS
@@ -120,6 +124,7 @@
 
 # Create the Executable
 add_executable(${EXEC_NAME} ${VALA_C})
+target_link_libraries(${EXEC_NAME} m)
 
 # Installation
 install (TARGETS ${EXEC_NAME} RUNTIME DESTINATION bin)

=== modified file 'org.pantheon.desktop.wingpanel.gschema.xml'
--- org.pantheon.desktop.wingpanel.gschema.xml	2012-07-08 03:02:36 +0000
+++ org.pantheon.desktop.wingpanel.gschema.xml	2013-12-24 20:42:13 +0000
@@ -13,7 +13,17 @@
 		<key type="s" name="default-launcher">
 			<default>"slingshot-launcher"</default>
 			<summary>The default program to use as App launcher.</summary>
-			<description>Description</description>
+			<description>The default program to use as App launcher.</description>
+		</key>
+		<key type="d" name="background-alpha">
+			<default>0.8</default>
+			<summary>Background opacity variable.</summary>
+			<description>Background opacity variable (must be between zero and one).</description>
+		</key>
+		<key type="b" name="auto-adjust-alpha">
+			<default>true</default>
+			<summary>Automatically update background alpha.</summary>
+			<description>Automatically update the background alpha to zero if it will be readable, else 0.8.</description>
 		</key>
 	</schema>
 </schemalist>

=== added file 'src/Services/BackgroundManager.vala'
--- src/Services/BackgroundManager.vala	1970-01-01 00:00:00 +0000
+++ src/Services/BackgroundManager.vala	2014-03-17 21:40:34 +0000
@@ -0,0 +1,110 @@
+// -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
+//
+//  Copyright (C) 2014 Wingpanel Developers
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+namespace Wingpanel.Services {
+    struct ColorInformation {
+        double average_red;
+        double average_green;
+        double average_blue;
+        double mean;
+        double variance;
+    }
+
+    [DBus (name = "org.pantheon.gala")]
+    interface GalaDBus : Object {
+        public signal void background_changed ();
+        public async abstract ColorInformation get_background_color_information (int monitor,
+            int x, int y, int width, int height) throws IOError;
+    }
+
+    public class BackgroundManager : Object {
+        public static const double MIN_ALPHA = 0.3;
+
+        private const int HEIGHT = 50;
+        private const double MIN_VARIANCE = 50;
+        private const double MIN_LUM = 25;
+
+        /**
+         * Emitted when the background changed. It supplies the alpha value that
+         * can be used with this wallpaper while maintining legibility
+         */
+        public signal void update_background_alpha (double legible_alpha_value);
+
+        private Services.Settings settings;
+        private Gdk.Screen screen;
+        private GalaDBus gala_dbus;
+
+        public BackgroundManager (Services.Settings settings, Gdk.Screen screen) {
+            this.settings = settings;
+            this.screen = screen;
+            establish_connection ();
+        }
+
+        private void establish_connection () {
+            try {
+                gala_dbus = Bus.get_proxy_sync (BusType.SESSION,
+                                                "org.pantheon.gala",
+                                                "/org/pantheon/gala");
+                gala_dbus.background_changed.connect (on_background_change);
+                on_background_change ();
+            } catch (Error e) {
+                gala_dbus = null;
+                warning ("Auto-adjustment of background opacity not available, " +
+                    "connecting to gala dbus failed: %s", e.message);
+                return;
+            }
+        }
+
+        private void on_background_change () {
+            if (!settings.auto_adjust_alpha)
+                return;
+
+            calculate_alpha.begin ((obj, res) => {
+                var alpha = calculate_alpha.end (res);
+                update_background_alpha (alpha);
+            });
+        }
+
+        private async double calculate_alpha () {
+            double alpha = 0;
+            Gdk.Rectangle monitor_geometry;
+            ColorInformation? color_info = null;
+
+            var primary = screen.get_primary_monitor ();
+            screen.get_monitor_geometry (primary, out monitor_geometry);
+
+            try {
+                color_info = yield gala_dbus.get_background_color_information (
+                                           primary,                // monitor index
+                                           0,                      // x of reference rect
+                                           0,                      // y of rect
+                                           monitor_geometry.width, // width of rect
+                                           HEIGHT);                // height of rect
+            } catch (Error e) {
+                warning (e.message);
+                alpha = MIN_ALPHA;
+            }
+
+            if (color_info != null
+                && (color_info.mean > MIN_LUM
+                || color_info.variance > MIN_VARIANCE))
+                alpha = MIN_ALPHA;
+
+            return alpha;
+        }
+    }
+}

=== modified file 'src/Services/Settings.vala'
--- src/Services/Settings.vala	2013-04-14 07:54:25 +0000
+++ src/Services/Settings.vala	2013-12-24 20:42:13 +0000
@@ -23,6 +23,8 @@
         public string[] blacklist { get; set; }
         public bool show_launcher { get; set; }
         public string default_launcher { get; set; }
+        public double background_alpha { get; set; }
+        public bool auto_adjust_alpha { get; set; }
 
         public Settings () {
             base ("org.pantheon.desktop.wingpanel");

=== modified file 'src/Widgets/BasePanel.vala'
--- src/Widgets/BasePanel.vala	2013-08-07 10:18:24 +0000
+++ src/Widgets/BasePanel.vala	2014-03-17 21:44:16 +0000
@@ -1,17 +1,17 @@
 // -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-
-//  
-//  Copyright (C) 2011-2013 Wingpanel Developers
-// 
+//
+//  Copyright (C) 2011-2014 Wingpanel Developers
+//
 //  This program is free software: you can redistribute it and/or modify
 //  it under the terms of the GNU General Public License as published by
 //  the Free Software Foundation, either version 3 of the License, or
 //  (at your option) any later version.
-// 
+//
 //  This program is distributed in the hope that it will be useful,
 //  but WITHOUT ANY WARRANTY; without even the implied warranty of
 //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 //  GNU General Public License for more details.
-// 
+//
 //  You should have received a copy of the GNU General Public License
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
@@ -32,6 +32,8 @@
         N_VALUES
     }
 
+    protected Services.Settings settings { get; private set; }
+
     private const int SHADOW_SIZE = 4;
 
     private int panel_height = 0;
@@ -41,9 +43,19 @@
     private int panel_displacement = -40;
     private uint animation_timer = 0;
 
+    private double legible_alpha_value = -1.0;
+    private double panel_alpha = 0.0;
+    private double panel_current_alpha = 0.0;
+    private uint panel_alpha_timer = 0;
+    const int FPS = 60;
+    const double ALPHA_ANIMATION_STEP = 0.05;
+
     private PanelShadow shadow = new PanelShadow ();
-
-    public BasePanel () {
+    private Wnck.Screen wnck_screen;
+
+    public BasePanel (Services.Settings settings) {
+        this.settings = settings;
+
         decorated = false;
         resizable = false;
         skip_taskbar_hint = true;
@@ -58,6 +70,28 @@
         screen.monitors_changed.connect (on_monitors_changed);
 
         destroy.connect (Gtk.main_quit);
+
+        wnck_screen = Wnck.Screen.get_default ();
+        wnck_screen.active_workspace_changed.connect (update_panel_alpha);
+        wnck_screen.window_opened.connect ((window) => {
+            if (window.get_window_type () == Wnck.WindowType.NORMAL)
+                window.state_changed.connect (window_state_changed);
+        });
+        wnck_screen.window_closed.connect ((window) => {
+            if (window.get_window_type () == Wnck.WindowType.NORMAL)
+                window.state_changed.disconnect (window_state_changed);
+        });
+
+        update_panel_alpha ();
+    }
+
+    private void window_state_changed (Wnck.Window window,
+            Wnck.WindowState changed_mask, Wnck.WindowState new_state) {
+        if ((changed_mask & Wnck.WindowState.MAXIMIZED_HORIZONTALLY) != 0
+            || (changed_mask & Wnck.WindowState.MAXIMIZED_VERTICALLY) != 0
+            && (window.get_workspace () == wnck_screen.get_active_workspace ()
+            || window.is_sticky ()))
+            update_panel_alpha ();
     }
 
     protected abstract Gtk.StyleContext get_draw_style_context ();
@@ -79,7 +113,11 @@
         }
 
         var ctx = get_draw_style_context ();
-        ctx.render_background (cr, size.x, size.y, size.width, size.height);
+        var background_color = ctx.get_background_color (Gtk.StateFlags.NORMAL);
+        background_color.alpha = panel_current_alpha;
+        Gdk.cairo_set_source_rgba (cr, background_color);
+        cr.rectangle (size.x, size.y, size.width, size.height);
+        cr.fill ();
 
         // Slide in
         if (animation_timer == 0) {
@@ -92,21 +130,75 @@
         if (child != null)
             propagate_draw (child, cr);
 
-        if (!shadow.visible)
+        if (panel_alpha > 1E-3) {
+            shadow.show ();
             shadow.show_all ();
+        } else
+            shadow.hide ();
 
         return true;
     }
 
+    public void update_opacity (double alpha) {
+        legible_alpha_value = alpha;
+        update_panel_alpha ();
+    }
+
+    private void update_panel_alpha () {
+        panel_alpha = settings.background_alpha;
+        if (settings.auto_adjust_alpha) {
+            if (active_workspace_has_maximized_window ())
+                panel_alpha = 1.0;
+            else if (legible_alpha_value >= 0)
+                panel_alpha = legible_alpha_value;
+        }
+
+        if (panel_current_alpha != panel_alpha)
+            panel_alpha_timer = Gdk.threads_add_timeout (1000 / FPS, draw_timeout);
+    }
+
+    private bool draw_timeout () {
+        queue_draw ();
+
+        if (panel_current_alpha > panel_alpha) {
+            panel_current_alpha -= ALPHA_ANIMATION_STEP;
+            panel_current_alpha = double.max (panel_current_alpha, panel_alpha);
+        } else if (panel_current_alpha < panel_alpha) {
+            panel_current_alpha += ALPHA_ANIMATION_STEP;
+            panel_current_alpha = double.min (panel_current_alpha, panel_alpha);
+        }
+
+        if (panel_current_alpha != panel_alpha)
+            return true;
+
+        if (panel_alpha_timer > 0) {
+            Source.remove (panel_alpha_timer);
+            panel_alpha_timer = 0;
+        }
+
+        return false;
+    }
+
     private bool animation_callback () {
-        if (panel_displacement >= 0 ) {
+        if (panel_displacement >= 0 )
             return false;
-        } else {
-            panel_displacement += 1;
-            move (panel_x, panel_y + panel_displacement);
-            shadow.move (panel_x, panel_y + panel_height + panel_displacement);
-            return true;
+
+        panel_displacement += 1;
+        move (panel_x, panel_y + panel_displacement);
+        shadow.move (panel_x, panel_y + panel_height + panel_displacement);
+        return true;
+    }
+
+    private bool active_workspace_has_maximized_window () {
+        var workspace = wnck_screen.get_active_workspace ();
+
+        foreach (var window in wnck_screen.get_windows ()) {
+            if ((window.is_pinned () || window.get_workspace () == workspace)
+                && window.is_maximized ())
+                return true;
         }
+
+        return false;
     }
 
     private void on_monitors_changed () {
@@ -144,9 +236,9 @@
         screen.get_monitor_geometry (screen.get_primary_monitor (), out monitor_dimensions);
 
         // if we have multiple monitors, we must check if the panel would be placed inbetween
-        // monitors. If that's the case we have to move it to the topmost, or we'll make the 
+        // monitors. If that's the case we have to move it to the topmost, or we'll make the
         // upper monitor unusable because of the struts.
-        // First check if there are monitors overlapping horizontally and if they are higher 
+        // First check if there are monitors overlapping horizontally and if they are higher
         // our current highest, make this one the new highest and test all again
         if (screen.get_n_monitors () > 1) {
             Gdk.Rectangle dimensions;
@@ -156,8 +248,8 @@
                     && dimensions.x < monitor_dimensions.x + monitor_dimensions.width)
                     || (dimensions.x + dimensions.width > monitor_dimensions.x
                     && dimensions.x + dimensions.width <= monitor_dimensions.x + monitor_dimensions.width)
-					|| (dimensions.x < monitor_dimensions.x
-					&& dimensions.x + dimensions.width > monitor_dimensions.x + monitor_dimensions.width))
+                    || (dimensions.x < monitor_dimensions.x
+                    && dimensions.x + dimensions.width > monitor_dimensions.x + monitor_dimensions.width))
                     && dimensions.y < monitor_dimensions.y) {
                     warning ("Not placing wingpanel on the primary monitor because of problems" +
                         " with multimonitor setups");

=== modified file 'src/Widgets/Panel.vala'
--- src/Widgets/Panel.vala	2013-09-13 08:51:05 +0000
+++ src/Widgets/Panel.vala	2014-03-17 21:44:16 +0000
@@ -2,7 +2,7 @@
 /***
   BEGIN LICENSE
 
-  Copyright (C) 2011-2012 Wingpanel Developers
+  Copyright (C) 2011-2014 Wingpanel Developers
   This program is free software: you can redistribute it and/or modify it
   under the terms of the GNU Lesser General Public License version 3, as published
   by the Free Software Foundation.
@@ -32,10 +32,11 @@
         private IndicatorLoader indicator_loader;
 
         public Panel (Gtk.Application app, Services.Settings settings, IndicatorLoader indicator_loader) {
+            base (settings);
+
+            this.indicator_loader = indicator_loader;
             set_application (app);
 
-            this.indicator_loader = indicator_loader;
-
             container = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
             left_wrapper = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
             right_wrapper = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
@@ -112,6 +113,18 @@
             var gpr = new Gtk.SizeGroup (Gtk.SizeGroupMode.HORIZONTAL);
             gpr.add_widget (left_wrapper);
             gpr.add_widget (right_wrapper);
+
+            // make sure those are all transparent when we later adjust the transparency
+            // in the panel's draw callback
+            clock.override_background_color (Gtk.StateFlags.NORMAL, Gdk.RGBA () {
+                red = 0.0, green = 0.0, blue = 0.0, alpha = 0.0
+            });
+            menubar.override_background_color (Gtk.StateFlags.NORMAL, Gdk.RGBA () {
+                red = 0.0, green = 0.0, blue = 0.0, alpha = 0.0
+            });
+            apps_menubar.override_background_color (Gtk.StateFlags.NORMAL, Gdk.RGBA () {
+                red = 0.0, green = 0.0, blue = 0.0, alpha = 0.0
+            });
         }
     }
 }

=== modified file 'src/WingpanelApp.vala'
--- src/WingpanelApp.vala	2013-09-13 08:51:05 +0000
+++ src/WingpanelApp.vala	2014-03-09 12:37:35 +0000
@@ -18,6 +18,7 @@
 public class Wingpanel.App : Granite.Application {
     private IndicatorLoader indicator_loader;
     private Widgets.BasePanel panel;
+    private Services.BackgroundManager background_manager;
 
     construct {
         build_data_dir = Build.DATADIR;
@@ -41,6 +42,9 @@
         panel = new Widgets.Panel (this, settings, indicator_loader);
 
         panel.show_all ();
+
+        background_manager = new Services.BackgroundManager (settings, panel.get_screen ());
+        background_manager.update_background_alpha.connect (panel.update_opacity);
     }
 
     protected override void activate () {

